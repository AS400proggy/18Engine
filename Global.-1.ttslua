--select options
COMPANIES_CAN_CROSS_INVEST = true --Companies will have shares from other companies on their own charter, and the script should handle this.
CROSS_INVESTED_SHARES_PAY = true --If, for some reason, your game allows companies to hold shares in other companies but those shares don't pay dividends.

BANK_SIZE = 12000


gameEntities = {
    ['SM'] = {
        moneyLabelGUID = '69a516',
        scriptingZoneGUID = '88654d',
        charterGUID = '5c990f',
        inputCounterGUID = '33f79c',
        num_shares=10,
        player = false,
        minor = false,
        charter = true,
    },
    ['S1'] = {
        moneyLabelGUID = '2789eb',
        inputCounterGUID = '2dc1ff',
        player = true,
    },
    ['BANK'] = {
        moneyLabelGUID = '0ba963',
        treasury = 37860,
        transactionLog = 'a796bf',
        company = false
    },
}

ipo_zone = '63a95f'
bank_zone = '4ad93d'

------------------------------------------------------------------------


transactions = nil

counterbuttonbank = {}
counterbuttonbank.click_function = 'buttonTransfer'
counterbuttonbank.function_owner = nil
counterbuttonbank.label = 'Bank Transfer'
counterbuttonbank.position = {0,0.1,0.5}
counterbuttonbank.rotation = {0,180,0}
counterbuttonbank.width = 400
counterbuttonbank.height = 100
counterbuttonbank.font_size = 50

witholdbuttonbank = {}
witholdbuttonbank.click_function = 'buttonWithold'
witholdbuttonbank.function_owner = nil
witholdbuttonbank.label = 'Withold'
witholdbuttonbank.position = {1,0.1,0}
witholdbuttonbank.rotation = {0,180,0}
witholdbuttonbank.width = 400
witholdbuttonbank.height = 100
witholdbuttonbank.font_size = 50

payfullbuttonbank = {}
payfullbuttonbank.click_function = 'buttonPay'
payfullbuttonbank.function_owner = nil
payfullbuttonbank.label = 'Payout'
payfullbuttonbank.position = {-1,0.1,0}
payfullbuttonbank.rotation = {0,180,0}
payfullbuttonbank.width = 400
payfullbuttonbank.height = 100
payfullbuttonbank.font_size = 50
payfullbuttonbank.color = green

-- payhalfbuttonbank = {}
-- payhalfbuttonbank.click_function = 'buttonPayHalf'
-- payhalfbuttonbank.function_owner = nil
-- payhalfbuttonbank.label = 'Pay Half'
-- payhalfbuttonbank.position = {0,0.1, -0.5}
-- payhalfbuttonbank.rotation = {0,180,0}
-- payhalfbuttonbank.width = 400
-- payhalfbuttonbank.height = 100
-- payhalfbuttonbank.font_size = 50
-- payhalfbuttonbank.iconColor = green

function buttonWithold(object, color)
    charterButtonHelper(object, color, 2)
end

function buttonPay(object, color)
    charterButtonHelper(object, color, 1)
end

-- function buttonPayHalf(object, color)
--     charterButtonHelper(object, color, 3)
-- end

function buttonTransfer(object, color)
    charterButtonHelper(object, color, 0)
end

function charterButtonHelper(object, color, type)

    local amount = object.getValue()
    local key = object.getGMNotes()

    if type == 0 then
        transferMoney(key, 'BANK', amount, true)
    elseif type == 1 then
        Payout(amount, key)
    elseif type == 2 then
        Withold(amount, key)
    elseif type == 3 then
        Payout(amount/2, key)
        Withold(amount/2, key)
    end

end

function getPlayerId(color)
    if color == 'Red' then return 'S1'
    elseif color == 'Brown' then return 'S2'
    elseif color == 'White' then return 'S3'
    elseif color == 'Green' then return 'S4'
    elseif color == 'Blue' then return 'S5'
    end
end

function assignTreasury(playerList, amount)
    for i=1, #playerList, 1 do
        gameEntities[playerList[i]].treasury = amount
    end
end

function transferMoney(from, to, amount, log)
        fromCounter = getObjectFromGUID(gameEntities[from].moneyLabelGUID)
    toCounter = getObjectFromGUID(gameEntities[to].moneyLabelGUID)
    gameEntities[to].treasury = gameEntities[to].treasury + amount
    gameEntities[from].treasury = gameEntities[from].treasury - amount

    updateLabels()
    if log then
        logTransaction(amount, from, to, true)
    end
end

function Withold(amount, company)
    gameEntities[company].treasury = gameEntities[company].treasury + amount
    gameEntities['BANK'].treasury = gameEntities['BANK'].treasury - amount
    logTransaction(amount, 'BANK', company .. ' Tres', false)
    printToAll('***** ' .. company .. ' WITHOLDS ' .. amount .. ' *****')
    updateLabels()
end

function logTransaction(amount, source, target, print)
    local str = os.date("%H:%M - ") .. 'Transferred ' .. amount .. ' from ' .. source .. ' to ' .. target
    if print then
        printToAll(str)
    end
    transactions = { next = transactions, value = str }
    local t = transactions
    local item = 0
    local transactionLog = ''
    while t and item < 10 do
        transactionLog = transactionLog .. t.value .. '\n'
        item = item + 1
        t = t.next
    end
    getObjectFromGUID(gameEntities['BANK'].transactionLog).setDescription(transactionLog)
end

function Payout(dividend, company)
    --tabulate shares in the players' hands
    local objectPile
    playerList = Player.getPlayers()
    local total_count = 0
    local quantity = 0
    local player_payouts = {}
    for i,player in ipairs(playerList) do
        count = 0
        objectPile = player.getHandObjects()
        for i,v in pairs(objectPile) do
            local name = objectPile[i].getName()
            if name == company then
                count = count + 1
            elseif name == company .. 'P2' then
                count = count + 2

            end
        end
        total_count = total_count + count
        if count > 0 then
            player_payouts[player.color] = { count = count, name = player.steam_name }
        end
    end

    --tabulate shares on the company charter
    local company_obj_pile
    company_obj_pile = getObjectFromGUID(gameEntities[company].scriptingZoneGUID).getObjects()
    count = 0
    company_count = 0
    for i,v in pairs(company_obj_pile) do
        name = v.getName()
        quantity = v.getQuantity()
        if name == company then
            if quantity == -1 then
                count = count + 1
            else
                count = count + quantity
            end
        end
    end
    company_count = count
    total_count = total_count + count

    --If companies can buy shares in other companies, tabulate shares on charters other than the acting company.
    local cross_invest_payouts = {}
    if COMPANIES_CAN_CROSS_INVEST then
        local objectPile
        for k,otherCompany in pairs(gameEntities) do
            --check to see if this is a company and that it's not this company
            if (otherCompany.charter and k~=company) then
                count = 0
                objectPile = getObjectFromGUID(gameEntities[k].scriptingZoneGUID).getObjects()
                for i,v in pairs(objectPile) do
                    name = v.getName()
                    quantity = v.getQuantity()
                    if name == company then
                        if quantity == -1 then
                            count = count + 1
                        else
                            count = count + quantity
                        end
                    end
                end
                total_count = total_count + count
                if count > 0 then
                    cross_invest_payouts[k] = {count=count, name=k}
                end
            end
        end
    end

    --tabluate shares in the zone labeled IPO
    count = 0
    local ipo_objs
    ipo_objs = getObjectFromGUID(ipo_zone).getObjects()
    for i,v in pairs(ipo_objs) do
        name = v.getName()
        quantity = v.getQuantity()
        if name == company then
            if quantity == -1 then
                count = count + 1
            else
                count = count + quantity
            end

        elseif name == company .. 'P' then
            count = count + 2
        end
    end
    total_count = total_count + count

    --tabulate shares in the zone labeled bank pool
    count = 0
    local ipo_objs
    ipo_objs = getObjectFromGUID(bank_zone).getObjects()
    for i,v in pairs(ipo_objs) do
        name = v.getName()
        quantity = v.getQuantity()
        if name == company then
            if quantity == -1 then
                count = count + 1
            else
                count = count + quantity
            end

        elseif name == company .. 'P' then
            count = count + 2
        end
    end
    total_count = total_count + count

    --print(total_count)
    --print(gameEntities[company].num_shares)
    if total_count==gameEntities[company].num_shares then
        printToAll("------ " .. company .. " pays " .. dividend .. " ------")

        --pay the players
        for k,v in pairs(player_payouts) do
          adjustment = math.ceil(dividend*(v.count/gameEntities[company].num_shares))
          transferMoney('BANK', getPlayerId(k), adjustment, false)
          local string = v.name .. ' paid ' .. adjustment .. ' for ' .. v.count .. ' shares'
          printToAll(string)
        end

        --pay the company
        adjustment = math.ceil(dividend*(company_count/gameEntities[company].num_shares))
        transferMoney('BANK', company, adjustment)
        printToAll(company .. ' paid ' .. adjustment .. ' for ' .. company_count .. ' shares')

        --pay other companies
        if CROSS_INVESTED_SHARES_PAY then
            for k,v in pairs(cross_invest_payouts) do
              adjustment = math.ceil(dividend*(v.count/gameEntities[company].num_shares))
              transferMoney('BANK', k, adjustment, false)
              local string = v.name .. ' paid ' .. adjustment .. ' for ' .. v.count .. ' shares'
              printToAll(string)
            end
        end

        --print to notecard log
        logTransaction(dividend, 'BANK', company .. ' Shares', false)

    --error handling
    elseif total_count < gameEntities[company].num_shares then
      printToAll('payouts NOT made, ' .. company .. ' shares are in a deck, or are not completely in the IPO/Treasury/Player hands')
    else
      printToAll('payouts NOT made, there are more than ' .. gameEntities[company].num_shares .. ' shares of ' .. company .. '!')
    end

    updateLabels()
end

function onload(savedState)
    for k,v in pairs(gameEntities) do

        --default treasuries
        if v.treasury == nil then v.treasury=0 end

        --Give each inputCounter a tag linking it to its key
        if v.inputCounterGUID then getObjectFromGUID(v.inputCounterGUID).setGMNotes(k) end

        if v.inputCounterGUID != '' and v.player == false then
            obj = getObjectFromGUID(v.inputCounterGUID)
            obj.createButton(counterbuttonbank)
            if v.minor == false then
            	obj.createButton(payfullbuttonbank)
            end
            obj.createButton(witholdbuttonbank)
        elseif v.inputCounterGUID != '' and v.player then
            obj = getObjectFromGUID(v.inputCounterGUID)
            obj.createButton(counterbuttonbank)
        end
    end

    updateLabels()
end

function onSave()
    local saveState = {
        transactions = transactions,
        gameEntities = gameEntities,
    }
    return JSON.encode(saveState)
end

function companyzoneupdate(zone,board,xadj,yadj,zadj)
    local bposition = {0,0,0}
    local zposition = {0,0,0}
    local fposition = {0,0,0}
    bposition = board.getPosition()
    zposition = zone.getPosition()
    fposition.x = bposition.x + xadj
    fposition.y = zposition.y + yadj
    fposition.z = bposition.z + zadj
    return fposition
end

function updateLabels()
    for i,entityName in pairs(gameEntities) do
        local button_parameters = {}
        button_parameters.click_function = 'nilFunction'
        button_parameters.label = entityName.treasury
        button_parameters.position = {0, 0.11, 0}
        button_parameters.rotation = {0, 0, 0}
        button_parameters.width = 0
        button_parameters.height = 0
        button_parameters.font_size = 700
        getObjectFromGUID(entityName.moneyLabelGUID).clearButtons()
        getObjectFromGUID(entityName.moneyLabelGUID).createButton(button_parameters)
    end
end

function update()
    --Make the scripting zone stick to the company charters
    for i, v in pairs(gameEntities) do
        if v.scriptingZoneGUID and v.charterGUID and v.scriptingZoneGUID != '' and v.charterGUID != '' then
            local z = getObjectFromGUID(v.scriptingZoneGUID)
            local b = getObjectFromGUID(v.charterGUID)
            z.setPosition(companyzoneupdate(z,b,0,0,0))
            local rotation = b.getRotation()
            z.setRotation(rotation)
        end
    end
end

--ensures that stacks of shares maintain the same name
function onObjectEnterContainer(container, enter_object)
    if (container.tag=='Deck') then
        local topCard = container.getObjects()[1].name
        container.setName(topCard)
    end
end
